import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dojo_app/game_modes/matches/constants_matches.dart' as constantsMatches;

class DatabaseServicesJudgeMatches {
  /// ***********************************************************************
  /// ***********************************************************************
  /// User
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Levels: Get Data
  /// ***********************************************************************
  /// ***********************************************************************


  /// ***********************************************************************
  /// ***********************************************************************
  /// Levels: Save Data
  /// ***********************************************************************
  /// ***********************************************************************


  /// ***********************************************************************
  /// ***********************************************************************
  /// Matches, Get Data
  /// ***********************************************************************
  /// ***********************************************************************

  /// Get MAP: details for a single match by ID
  // used by view replay only
  Future<Map> fetchGameDetailsByID(String gameMode, String matchGroupID, String userID, String id) async {
    final matchDetailQuery = await FirebaseFirestore.instance
        .collection('matchesAll2')
        .where('id', isEqualTo: id)
        //.orderBy('dateUpdated', descending: true)
        .get();

    var result = matchDetailQuery.docs.first.data();
    return result;
  }

  /// ***********************************************************************
  /// ***********************************************************************
  /// Matches: Save Data
  /// ***********************************************************************
  /// ***********************************************************************


  /// ***********************************************************************
  /// Matches - Judging: Save Data
  /// ***********************************************************************

  /// ***********************************************************************
  /// Matches - Video, Food: Save Data
  /// ***********************************************************************

  /// Update match or level collection with player videos
  Future<void> updateMatchWithVideoURLFlat(gameMode, groupID, id, userID, videoOwnerUserID, videoURL) async {
    /// Fetch data
    final gameQuery = await FirebaseFirestore.instance
        .collection('matchesAll2')
        .where('id', isEqualTo: id)
        .get();

    if (gameQuery.docs.isNotEmpty) {
      var result = gameQuery.docs.first.data();
      Map playerVideoMap = result['playerVideos'];

      /// Update Map with this user's video
      playerVideoMap[videoOwnerUserID] = videoURL;

      /// Update userID's document
      DocumentReference updateMatch = FirebaseFirestore.instance
          .collection('matchesAll2')
          .doc(id);

      updateMatch.update({
        "playerVideos": playerVideoMap,
      }); // end
    }
  }

  /// ***********************************************************************
  /// ***********************************************************************
  /// Judging: Get Data
  /// ***********************************************************************
  /// ***********************************************************************

  Stream<QuerySnapshot> fetchMatchesForJudgingStream(String userID) {
    final Stream<QuerySnapshot> matchesForJudging = FirebaseFirestore.instance
        .collection('judging')
    //.where('userAccess', arrayContains: userID)
        .where('status', isEqualTo: constantsMatches.cJudgeMatchStatusOpen)
    //.orderBy('dateUpdated', descending: false)
        .snapshots();

    var result;
    result = matchesForJudging;
    return result;
  }

  /// ***********************************************************************
  /// ***********************************************************************
  /// Judging: Save Data
  /// ***********************************************************************
  /// ***********************************************************************


  /// ***********************************************************************
  /// ***********************************************************************
  /// Leaderboard
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Other
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Player Records: Get Data
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Player Records: Save Data
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Videos: Get Data
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Videos: Save Data
  /// ***********************************************************************
  /// ***********************************************************************

  /// ***********************************************************************
  /// ***********************************************************************
  /// Firebase Storage
  /// ***********************************************************************
  /// ***********************************************************************

} // end database service class